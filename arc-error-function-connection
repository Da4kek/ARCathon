import networkx as nx

def connection(node_a, node_b):
    G = nx.Graph()

    # Iterate over properties of node_a
    for prop_a in node_a:
        # Iterate over properties of node_b
        for prop_b in node_b:
            # Compare property values and calculate differences
            a_value = node_a[prop_a]
            b_value = node_b[prop_b]
            equal = a_value == b_value
            greater = a_value > b_value
            lesser = a_value < b_value
            if b_value != 0:
                ratio = a_value / b_value
            else:
                ratio = None  # Avoid division by zero

            # Create a vertex and add properties
            vertex = f"{prop_a}_{prop_b}"
            G.add_node(vertex, equal=equal, greater=greater, lesser=lesser, ratio=ratio)

    return G

# Example usage:
node_a = {'color': 'red', 'num_edges': 5}
node_b = {'color': 'blue', 'num_edges': 7}
graph = connection(node_a, node_b)

# Access properties of the vertices in the graph
for node, data in graph.nodes(data=True):
    print("Vertex:", node)
    print("Equal:", data['equal'])
    print("Greater:", data['greater'])
    print("Lesser:", data['lesser'])
    print("Ratio:", data['ratio'])
